on:
  push:
    branches:
    - code
  pull_request:
  
name: AzureCLISample
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: Azure CLI script
      uses: azure/CLI@v1
      with:
        azcliversion: 2.30.0
        inlineScript: |
          $kvnames = @('testkeyvaultssg1', 'keyvaulttemplategopi')
          $secretnames = @('app1', 'app2','2226')
          $secretvalues = @('app1', 'app2','2226')
          for ($kvn = 0; $kvn -le $kvnames.count - 1; $kvn++) {
              $kvnames[$kvn] 
              $kvlist = az keyvault secret list --vault-name $kvnames[$kvn] | ConvertFrom-Json
              $kvlist.name.count
              $allsecretvalues =@()
              $allsecretnames =@()
              for ($secretlist = 0; $secretlist -le $kvlist.names.count - 1; $secretlist++) {
                  $kvsecret = az keyvault secret show --vault-name $kvnames[$kvn]  --name $kvlist.name[$secretlist]
                  $allsecretvalues += ($kvsecret | ConvertFrom-Json).value
                  $allsecretnames += ($kvsecret | ConvertFrom-Json).name
              } 
              $alreadyexist = 0
              for ($i = 0; $i -le $secretnames.count - 1; $i++) {
                  for ($j = 0; $j -le $allsecretnames.count - 1; $j++) {

                      if ($secretnames[$i] -eq $allsecretnames[$j]) {
                          if ($secretvalues[$i] -eq $allsecretvalues[$j]) {
                              $alreadyexist = 1
                              $secretnamethatexist = $secretnames[$i]
                              $secretvaluethatexist = $secretvalues[$i]
                          } 
                      } 
                  }
              }
              if ($alreadyexist -eq 1) {
                  Write-Host "Secret Already Exists - $secretnamethatexist and $secretvaluethatexist and $kvnames[$kvn] "
              }
          }

  terraform:
    name: 'Terraform'
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
    runs-on: ubuntu-latest
    environment: testdev
 
 
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
 
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
         
    - name: 'Terraform Init'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: 'init'
        tf_actions_working_dir: "./KV"
 
    - name: 'Terraform Validate'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: 'validate'
        tf_actions_working_dir: "./KV"
         
    - name: 'Terraform Plan'
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: 'plan'
        tf_actions_working_dir: "./KV"
 
    - name: Terraform Apply
      uses: hashicorp/terraform-github-actions@master
      with:
        tf_actions_version: 0.14.8
        tf_actions_subcommand: 'apply'
        tf_actions_working_dir: "./KV"
